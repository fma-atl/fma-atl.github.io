-- @atlcompiler atl2010
-- @path CD=/fma.interpreter.atl/src/test/resources/fma/atl/orm/resolveTemp/Class.ecore
-- @path Relational=/fma.interpreter.atl/src/test/resources/fma/atl/orm/resolveTemp/Relational.ecore
module Package2Database;
create OUT : Relational from IN : CD;

-- uses strings;
-- if there is a configuration problem with the library string,
-- delete the two firstToLower() operations and you no longer need the library "strings"
-- the transfomarion will execute 


-- inheritance not supported yet

-- issue: choose an object-id Type (Integer, String?).
-- We choose Integer here, assuming this type is defined in the source model.

-- global variable
-- context 
helper def: objectIdType : CD!DataType =
	CD!DataType.allInstances()->select(e | e.name = 'Integer')->asSequence()->first();



rule DataType2Type {
	from
		dt : CD!DataType
	to
		out : Relational!Type (
			name <- dt.name
		)
}






rule zClass2Table {
	from
		c : CD!Class
	to
		out : Relational!Table (
			name <- c.name,
			-- Columns are generated from Attributes in another rule not explicitly called here !
			col <- Sequence {key} -> union(c.attr->select(a1 | not a1.multiValued)->collect(a2 | thisModule.resolveTemp(a2,'out'))),
			key <- Sequence {key}
		),
		key : Relational!Column (
			name <- 'objectId',
			type <- thisModule.resolveTemp(thisModule.objectIdType,'out')
		)
}



rule zPackage2Database {
	from
		p : CD!Package
	to
		out : Relational!Database (
			name <- p.name,
			-- Columns are generated from Attributes in another rule not explicitly called here !
			tables <- 
				p.classifiers
				->select(c0 | c0.oclIsTypeOf(CD!Class))
				->collect( c1 | thisModule.resolveTemp(c1,'out') ) 
				-> union(
				 	p.classifiers
					->select(c2 | c2.oclIsTypeOf(CD!Class))
					->collect( c3 | c3.attr )->flatten()
					->select(a1 | a1.multiValued)
					->collect(a2 | thisModule.resolveTemp(a2,'out'))
				)
		)
}


rule DataTypeAttribute2Column {
	from
		a : CD!Attribute (
			a.type.oclIsKindOf(CD!DataType) and not a.multiValued
		)
	to
		out : Relational!Column (
			name <- a.name,
--			type <-- a.type
			type <- thisModule.resolveTemp(a.type,'out')
-- explicit use of implicit tracking links (first expected syntax, then present actual syntax)
--			owner <- [Class2Type.key]a.owner
--			owner <- thisModule.resolveTemp(a.owner, 'key')
		)
}

rule MultiValuedDataTypeAttribute2Column {
	from
		a : CD!Attribute (
			a.type.oclIsKindOf(CD!DataType) and a.multiValued
		)
	to
		out : Relational!Table (
			name <- a.owner.name + '_' + a.name,
			col <- Sequence {id, value}
		),
		id : Relational!Column (
			-- name <- a.owner.name.firstToLower() + 'Id',
			name <- a.owner.name + 'Id',
			type <- thisModule.resolveTemp(thisModule.objectIdType,'out')
		),
		value : Relational!Column (
			name <- a.name,
			type <- thisModule.resolveTemp(a.type,'out')
		)
}

rule ClassAttribute2Column {
	from
		a : CD!Attribute (
			a.type.oclIsKindOf(CD!Class) and not a.multiValued
		)
	to
		out : Relational!Column (
			name <- a.name + 'Id',
			type <- thisModule.resolveTemp(thisModule.objectIdType,'out')
		)
}

rule MultiValuedClassAttribute2Column {
	from
		a : CD!Attribute (
			a.type.oclIsKindOf(CD!Class) and a.multiValued
		)
	to
		out : Relational!Table (
			name <- a.owner.name + '_' + a.name,
			col <- Sequence {id, foreignKey}
		),
		id : Relational!Column (
			-- name <- a.owner.name.firstToLower() + 'Id',
			name <- a.owner.name + 'Id',
			type <- thisModule.resolveTemp(thisModule.objectIdType,'out')
		),
		foreignKey : Relational!Column (
			name <- a.name + 'Id',
			type <- thisModule.resolveTemp(thisModule.objectIdType,'out')
		)
}