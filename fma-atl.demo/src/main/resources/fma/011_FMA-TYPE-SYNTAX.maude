















mod FMA-TYPE-SYNTAX is
  inc FMA-SYNTAX .
  
  vars P P2 : PropName .
  var F : Field .
  var BT : BaseTypeName .
  var DT DT1 DT2 : DataTypeName .
  vars R R1 R2 : FieldSet . 
  vars SIGMA SIGMA1 SIGMA2 : RecordType .
  vars C C1 C2 : ObjectTypeName .
  var CT CT1 CT2 : CollectionTypeName .
  vars BT1 BT2 : BaseTypeName .
  var ALPHA ALPHA1 ALPHA2 : Scalar .
  var TAU TAU1 TAU2 : FmaType .
  var MTN1 MTN2 : ModelTypeName .
  var SC1 SC2 : Cid .
  vars QC1 QC2 : QualifiedCid .
  vars E QE1 QE2 : EnumTypeName .
  var ES1 ES2 : UnionType .
  var N : Int .
  var M : Int .
  var OP OP1 OP2 : OpPropName .
  var CM : CollectionModifier .
  

  
  sort BaseTypeName Scalar .
  ops DSL#Bool DSL#Int DSL#Float DSL#String : -> BaseTypeName .
  
  sort Void .
  op void : -> Void [ctor] . 

  sorts FmaType UnitType .
  subsorts Scalar RecordType < FmaType .
  subsort UnionType < RecordType .

  
  
  subsort ModelTypeName < Scalar .      
  sort DataTypeName .
  subsort BaseTypeName EnumTypeName < DataTypeName .
  subsort Void UnitType CollectionTypeName < Scalar .
  

  sort Field .
  subsort Field < FieldSet . 
  op _:t_ : PropName Scalar -> Field [ctor] .
  op __ : FieldSet FieldSet -> FieldSet [ctor assoc comm id: noField] .
  op noField : -> FieldSet [ctor] .

  
  
  
  ops UndefCid AnyCid : -> QualifiedCid . 
  

  
  
  sort ObjectRefTypeName .
  subsort DataTypeName ObjectTypeName ObjectRefTypeName < CollectionTypeName .   
  op ref : ObjectTypeName -> ObjectRefTypeName [ctor] .

  sort ObjectTypeName .
  subsort QualifiedCid < ObjectTypeName .

  
  op {_} : FieldSet -> RecordType . 
  
  op [_] : FieldSet -> UnionType .  
  
  
  

  
  sort CollectionTypeName CollectionModifier .
  
  
  
  
  
  
  op _[_.._]{_}_ : CollectionTypeName Int Int CollectionModifier OpPropName -> CollectionTypeName [ctor ] . 

  sort OpPropName .
  op bi : PropName -> OpPropName [ctor] .
  op uni : -> OpPropName .

  
  
  
  
  ops set ordered bag seq : -> CollectionModifier [ctor] .

  eq (P :t DT) = P :t DT [0 .. -1] { ordered } uni .
  
  
  eq (P :t C) = P :t C [0 .. -1] { ordered } uni .
  
  eq (P :t ref(C)) = P :t ref(C) [0 .. -1] { ordered } uni .


  
  op type : Field -> Scalar .
  eq type( P :t S:Scalar ) = S:Scalar .
  
  op type : ObjectTypeName PropName -> [Scalar] .
  eq type(C,P) = type(project(P, cl(C))) .

  op project : PropName FieldSet ~> Field .
  eq project( P, (P :t ALPHA) R ) = P :t ALPHA .
  
  op hasField : Field FieldSet -> Bool .
  eq hasField( P :t ALPHA1, (P :t ALPHA2) R ) = true .
  eq hasField( F, R ) = false [owise] .


  op typeName : Field -> [CollectionTypeName] .
  eq typeName( P :t DT [N:Int .. M:Int] { CM } uni ) = DT .
  eq typeName( P :t C [N:Int .. M:Int] { CM } OP ) = C .
  eq typeName( P :t ref(C) [N:Int .. M:Int] { CM } OP ) = C .
  
  op typeName : ObjectTypeName PropName -> [ObjectTypeName] .
  eq typeName(C,P) = typeName(project(P, cl(C))) .


  op op : Field -> [PropName] .
  eq op( P :t CT [N:Int .. M:Int] { CM } bi(P2) ) = P2 .
  
  op op : ObjectTypeName PropName -> [PropName] .
  eq op(C,P) = op(project(P, cl(C))) .


  op opIsCmt : ObjectTypeName PropName -> Bool .
  eq opIsCmt(C,P) = 
    isCmt(project(
      op(project(P, cl(C))),
      cl(typeName(project(P, cl(C))))
    )) .

  op lower : Field -> Int .
  eq lower( P :t CT [N:Int .. M:Int] { CM } OP ) = N:Int .
  
  op lower : ObjectTypeName PropName -> Int .
  eq lower(C,P) = lower(project(P, cl(C))) .


  op upper : Field -> Int .
  eq upper( P :t CT [N:Int .. M:Int] { CM } OP ) = M:Int .
  
  op upper : ObjectTypeName PropName -> Int .
  eq upper(C,P) = upper(project(P, cl(C))) .


  op isUnique : Field -> Bool .
  eq isUnique( P :t CT [N:Int .. M:Int] { set } OP ) = true .
  eq isUnique( P :t CT [N:Int .. M:Int] { ordered } OP ) = true .
  eq isUnique( P :t CT [N:Int .. M:Int] { CM } OP ) = false [owise] .
  
  op isUnique : ObjectTypeName PropName -> Int .
  eq isUnique(C,P) = isUnique(project(P, cl(C))) .

  op isOrdered : Field -> Bool .
  eq isOrdered( P :t CT [N:Int .. M:Int] { ordered } OP ) = true .
  eq isOrdered( P :t CT [N:Int .. M:Int] { seq } OP ) = true .
  eq isOrdered( P :t CT [N:Int .. M:Int] { CM } OP ) = false [owise] .
  
  op isOrdered : ObjectTypeName PropName -> Int .
  eq isOrdered(C,P) = isOrdered(project(P, cl(C))) .

  op isAtt : Field -> Bool .
  eq isAtt( P :t DT [N:Int .. M:Int] { CM } uni ) = true .
  eq isAtt( P :t CT ) = false [owise] .
  
  op isAtt : ObjectTypeName PropName -> Bool .
  eq isAtt(C,P) = isAtt(project(P, cl(C))) .

  
  op isRef : Field -> Bool .
  eq isRef( P :t ref(C) [N:Int .. M:Int] { CM } OP ) = true .
  eq isRef( P :t ref(C) ) = true . 
  eq isRef( P :t CT ) = false [owise] .
  
  op isRef : ObjectTypeName PropName -> Bool .
  eq isRef(C,P) = isRef(project(P, cl(C))) .

  
  op isCmt : Field -> Bool .
  eq isCmt( P :t C [N:Int .. M:Int] { CM } OP ) = true .
  eq isCmt( P :t C ) = true . 
  eq isCmt( P :t CT ) = false [owise] .
  
  op isCmt : ObjectTypeName PropName -> Bool .
  eq isCmt(C,P) = isCmt(project(P, cl(C))) .

  
  op isCont : PropName FieldSet -> Bool .
  eq isCont( P:PropName, (P:PropName :t C2:QualifiedCid) R:FieldSet ) = true .
  eq isCont( P:PropName, (P:PropName :t C [N:Int .. M:Int] { CM } OP) R:FieldSet ) = true .
  eq isCont( P:PropName, R:FieldSet ) = false [owise] .


  
  
  
  
  
  op _[_.._]_ : CollectionTypeName Int Int OpPropName -> CollectionTypeName [ctor] .
  eq P :t CT [N .. M] OP = P :t CT [N .. M] { bag } OP .
  
  op unique_[_.._]_ : CollectionTypeName Int Int OpPropName -> CollectionTypeName [ctor] .
  eq P :t unique CT [N .. M] OP = P :t CT [N .. M] { set } OP .
  
  op ordered_[_.._]_ : CollectionTypeName Int Int OpPropName -> CollectionTypeName [ctor] .
  eq P :t ordered CT [N .. M] OP = P :t CT [N .. M] { seq } OP .
  
  op unique`ordered_[_.._]_ : CollectionTypeName Int Int OpPropName -> CollectionTypeName [ctor] .
  eq P :t unique ordered CT [N .. M] OP = P :t CT [N .. M] { ordered } OP .
  
  

  
  
  
  



  
  
  

  
  sorts TypeNameList ProcType .
  op nil : -> TypeNameList .
  subsort Scalar < TypeNameList .
  op _x_ : Scalar TypeNameList -> TypeNameList .

  op _->_ : TypeNameList Scalar -> ProcType [ctor gather (e E)] .



  sorts Parameter ParamList .
  op nil : -> ParamList .
  op _,_ : ParamList ParamList -> ParamList [ditto] . 
  subsort ParamList < ArgList .
  subsort Parameter < ParamList .
  
  
  
  subsort VarExpr < Parameter .
  
  
  op _:_ : VarExpr Scalar -> Parameter [ctor prec 49] .

  
  sort FunDecl ProcDecl  .
  op _`(_`)=_:_ : ProcName ParamList Stmt ProcType -> ProcDecl .
  
  op _`(_`)=_ : ProcName ParamList Stmt -> ProcDecl .
  
  
  subsort FunDecl < ProcDecl .
  op _`(_`)=_:_ : FunName ParamList Expr ProcType -> FunDecl .
  
  op _`(_`)=_ : FunName ParamList Expr -> FunDecl .
  
  subsort ProcDecl < EnvP .
  subsort ProcDecl < SingletonStmt .



  op type : CollectionTypeName -> [FmaType] .
  
  eq type(BT) = BT .
  
  eq type(AnyCid) = { noField } . 
  ceq type(C) = { cl(C) } 
  if (C =/= AnyCid) /\  (C =/= UndefCid) .
  eq type(UndefCid) = [ noField ] . 
  
  eq type(E) = [ enum(E) ] .





  op _<:_ : FmaType FmaType -> Bool .
  eq TAU1 <: TAU2 = subtypeOf(TAU1,TAU2,empty) .


  op subtypeOf : FmaType FmaType SubtypeCheckSet -> Bool .

  eq subtypeOf(TAU1, TAU1, SCS) = true .

  
  eq subtypeOf( BT1, BT2, SCS ) = 
    if (BT1 == BT2) then
      true  	
    else 
    	if ((BT1 == DSL#Int) and (BT2 == DSL#Float)) then
        true
      else 
        false
      fi
    fi .
  
  
  eq subtypeOf(UndefCid, QE2, SCS) = true .  
  eq subtypeOf(QE1, QE2, SCS) = 
    subtypeOf(type(QE1), type(QE2), SCS) .

  
  eq subtypeOf(QC1, AnyCid, SCS) = true .
  eq subtypeOf(UndefCid, QC2, SCS) = true .

  eq subtypeOf(QC1, QC2, SCS) = 
    subtypeOf( type(QC1), type(QC2), SCS) .

  
  eq subtypeOf( (UndefCid [L1 .. U1] {CM1} OP1), (DT2 [L2 .. U2] {CM2} OP2), SCS ) = true .

  eq subtypeOf( (DT1 [L1 .. U1] {CM1} OP1), (DT2 [L2 .. U2] {CM2} OP2), SCS ) = 
    if (    
      
      
      (subtypeOf(type(DT1), type(DT2), SCS ))  
    ) then
      true
    else
      false
    fi
  .  
    
  
  eq subtypeOf( (C1 [L1 .. U1] {CM1} OP1), (C2 [L2 .. U2] {CM2} OP2), SCS ) = 
    if (isCached(C1, C2, SCS)) then  
      true
    else
      if (


        (
            not(isLessRestrictiveThan( (C1 [L1 .. U1] {CM1} OP1) , (C2 [L2 .. U2] {CM2} OP2))) 
          and-then 
            (subtypeOf(type(C1), type(C2), SCS cached(C1, C2))) 
        )
      ) then
        true
      else
        false
      fi
    fi 
  .
    
  
  eq subtypeOf( ref(C1) [L1 .. U1] {CM1} OP1, ref(C2) [L2 .. U2] {CM2} OP2, SCS ) = 
    subtypeOf( (C1 [L1 .. U1] {CM1} OP1), (C2 [L2 .. U2] {CM2} OP2), SCS ) .

  
  
  eq subtypeOf({ R1 }, { noField }, SCS) = true . 
  ceq subtypeOf({ noField } , { R2 }, SCS) = false
  if R2 =/= noField .
  
  eq subtypeOf([ noField ], { R2 }, SCS) = true . 
  
  eq subtypeOf( { (P :t ALPHA1) R1 }, { (P :t ALPHA2) R2 }, SCS ) = 
    if (subtypeOf( ALPHA1, ALPHA2, SCS ) ) then
      subtypeOf({ R1 }, { R2 }, SCS) 
    else
      false 
    fi .

  
  eq subtypeOf([ R1 ], [ noField ], SCS) = false . 
  ceq subtypeOf([ noField ] , [ R2 ], SCS) = true 
  if R2 =/= noField .


  eq subtypeOf( [ (P :t ALPHA1) R1 ], [ (P :t ALPHA2) R2 ], SCS ) = 
    if (subtypeOf( ALPHA1, ALPHA2, SCS ) ) then
      subtypeOf([ R1 ], [ R2 ], SCS) 
    else
      false 
    fi .
    

  
  eq subtypeOf( TAU1, TAU2, SCS ) = false [owise] .








  
  
  sort SubtypeCheck SubtypeCheckSet .
  subsort SubtypeCheck < SubtypeCheckSet .
  op __ : SubtypeCheckSet SubtypeCheckSet -> SubtypeCheckSet [comm assoc id: empty] .
  op empty : -> SubtypeCheckSet .
  op cached : CollectionTypeName CollectionTypeName -> SubtypeCheck .  
  var SCS : SubtypeCheckSet . 
    
  op isCached : CollectionTypeName CollectionTypeName SubtypeCheckSet -> Bool .
  eq isCached(CT1, CT2, cached(CT1,CT2) SCS) = true .
  eq isCached(CT1, CT2, SCS) = false [owise] .
    


  vars CM1, CM2 : CollectionModifier .
  vars L1 L2 : Int .
  vars U1 U2 : Int .


  
  
  op isLessRestrictiveThan : CollectionTypeName CollectionTypeName ~> Bool .
  
  
  
  eq isLessRestrictiveThan( 
    CT1 [ L1 .. U1 ] { CM1 } OP1,
    CT2 [ L2 .. U2 ] { CM2 } OP2
  ) = 
    CT1 == UndefCid
  or-else
    
    
    (L1 =/= -1 and-then L2 =/= -1 and-then L1 < L2)
  or-else 
    (U1 =/= -1 and-then U2 =/= -1 and-then U1 > U2)
    or-else
    (U1 == -1 and-then U2 =/= -1) 
  or-else
    (
      isLessRestrictiveThan(CM1,CM2)
    ) 
  or-else
    (
      OP1 =/= OP2
    )
  .
  op isLessRestrictiveThan : CollectionModifier CollectionModifier -> Bool .
  eq isLessRestrictiveThan( set, ordered ) = true .  
  eq isLessRestrictiveThan( bag, seq ) = true . 
  eq isLessRestrictiveThan( bag, set ) = true . 
  eq isLessRestrictiveThan( seq, ordered ) = true . 
  eq isLessRestrictiveThan( CM1:CollectionModifier, CM2:CollectionModifier ) = false [owise] .






  
  op Unit : -> UnitType . 
  
    












  
  op domainRestriction : RecordType RecordType ~> RecordType .
  eq domainRestriction( { R1 }, { R2 } ) = 
    { domainRestriction(R1, R2) } .

  op domainRestriction : FieldSet FieldSet ~> FieldSet .
  eq domainRestriction( (P :t ALPHA1) R1, (P :t ALPHA2) R2 ) = (P :t ALPHA2) domainRestriction(R1,R2) .
  eq domainRestriction( R1, R2 ) = noField [owise] .
 


endm







view FieldSet from TRIV to FMA-TYPE-SYNTAX is
  sort Elt to FieldSet .
endv

view FmaType from TRIV to FMA-TYPE-SYNTAX is
  sort Elt to FmaType .
endv

view VarExpr from TRIV to FMA-SYNTAX is
  sort Elt to VarExpr .
endv

view QualifiedCid from TRIV to MODEL is
  sort Elt to QualifiedCid .
endv








mod FMA-TYPE-INFERENCE-MODEL is
  pr MAP{VarExpr,FmaType} * (op undefined to undefTEnv) .
  
  
  var E : Expr .
  var TAU : FmaType .
  var BT : BaseTypeName .
  var ALPHA : Scalar .
  vars SIGMA SIGMA2 : RecordType .
  var VAR : VarExpr . 
  var V : ValueExpr .
  var O : Oid .
  vars C C1 C2 : QualifiedCid .
  var I I1 I2 : Int .
  var P : PropName .
  var PS : PropSet .
  var TE : Map{VarExpr,FmaType} . 
  vars R R1 R2 : FieldSet .
   
  vars iOS : IOidSet .
  var iO : IOid .

  vars iObjS : IObjectSet .
  var iObj : IObject .
  
  var OBJ : Object .
  
  vars IS IS1 IS2 : IOidSet .

  
  sort FmaType? .
  subsorts FmaType < FmaType? .
  
  
  sorts Subtype SubtypeRelation .
  subsort Subtype < SubtypeRelation .
  op subtype : QualifiedCid QualifiedCid -> Subtype .
  op __ : SubtypeRelation SubtypeRelation -> SubtypeRelation [comm assoc id: empty] .
  op empty : -> SubtypeRelation .

  op sr : ModelTypeName -> SubtypeRelation .  
  
  
  op isSubtypeOf : Cid Cid SubtypeRelation -> Bool .
  eq isSubtypeOf(C1, C2, subtype(C1, C2) SR:SubtypeRelation) = true .
  eq isSubtypeOf(C1, C2, SR:SubtypeRelation) = false [owise] .
  
  
  
  
  
  
  
  
  
  
  
  
  
  



  op _|-_ : Map{VarExpr,FmaType} Expr -> FmaType? .


  eq [T-VAR] : (TE, (VAR |-> ALPHA)) |- VAR = ALPHA .
  eq [T-BASE-INT] : TE |- val(I:Int) = DSL#Int .
  eq [T-BASE-FLOAT] : TE |- val(F:Float) = DSL#Float .
  eq [T-BASE-STRING] : TE |- val(S:String) = DSL#String . 
  eq [T-BASE-BOOL] : TE |- val(B:Bool) = DSL#Bool . 



  
  
  eq [T-REFa] : TE |- val(literal(S:String)) = UndefCid . 


  
  
  eq [T-REFa] : TE |- val(oid(C,I)) = ref(C) . 
  eq [T-REFb] : TE |- val(oid(C,S:String)) = ref(C) . 

  eq [T-REF-ANY] : TE |- ref(empty) = ref(UndefCid) .
  eq [T-REF-ANY] : TE |- ref(I |-> sentinel) = ref(UndefCid) .
  
  ceq [T-REF1] : TE |- ref((I |-> O) iOS) = 
  	ref(C2)
  if 
  	ref(C) := TE |- val(O)
  /\ 
  	ref(C2) := TE |- ref(iOS)  
  /\
    type(C) <: type(C2)  .

  ceq [T-REF2] : TE |- ref((I |-> O) iOS) = 
  	ref(C)
  if 
  	ref(C) := TE |- val(O) 
  /\ 
  	ref(C2) := TE |- ref(iOS)  
  /\
    type(C2) <: type(C) .

  ceq [T-REF3] : TE |- ref((I |-> O) iOS) = 
    ref(MAXC:QualifiedCid)
  if 
  	ref(C) := TE |- val(O) 
  /\ 
  	ref(C2) := TE |- ref(iOS)  
  /\ 
  	not(type(C2) <: type(C))
  /\ 
  	not(type(C) <: type(C2)) 
  /\
    MAXC:QualifiedCid := meetSuperType(sr(getMetamodelName(C)), C, C2) .   
    
  
  
  
  
  
  

  
  
  eq [T-OBJ-ANY] : TE |- val(empty) = UndefCid .
  eq [T-OBJ-ANY] : TE |- val(I |-> sentinel) = UndefCid .
  
  ceq [T-OBJ-OSET1] : TE |- val(((I1 |-> OBJ) iObjS)) = 
    C2
  if 
  	C := TE |- OBJ
  /\ 
  	C2 := TE |- val(iObjS)  
  /\ 
  	type(C) <: type(C2) .

  ceq [T-OBJ-OSET2] : TE |- val(((I1 |-> OBJ) iObjS)) = 
  	C
  if 
  	C := TE |- OBJ 
  /\ 
  	C2 := TE |- val(iObjS)  
  /\ 
  	type(C2) <: type(C) .
  
  ceq [T-OBJ-OSET3] : TE |- val(((I1 |-> OBJ) iObjS)) = 
  	MAXC:QualifiedCid
  if 
  	C := TE |- OBJ 
  /\ 
  	C2 := TE |- val(iObjS)  
  /\ 
  	not(type(C2) <: type(C))
  /\ 
  	not(type(C) <: type(C2))
  /\
    MAXC:QualifiedCid := meetSuperType(sr(getMetamodelName(C)), C, C2) .
  
  
  
  
  op meetSuperType : SubtypeRelation QualifiedCid QualifiedCid -> QualifiedCid .
  eq meetSuperType( SR:SubtypeRelation, C, AnyCid) = AnyCid .
  eq meetSuperType( SR:SubtypeRelation, AnyCid, C) = AnyCid .
  eq meetSuperType( SR:SubtypeRelation, C, UndefCid) = C .
  eq meetSuperType( SR:SubtypeRelation, UndefCid, C) = C .
  eq meetSuperType( subtype(C1,C) subtype(C2,C) SR:SubtypeRelation, C1, C2) = C .  



  
  
  
  
  op _|-_ : Map{VarExpr,FmaType} Object -> FmaType? .
  ceq [T-OBJECT] : TE |- { prop("_id") = val(O), PS } = 
  	C
  if
  	ref(C) := TE |- val(O)         
  /\
  	SIGMA := C ; TE |- PS  
  /\ 
  	SIGMA2 := type(C) 
  /\
    
    
  	SIGMA =: SIGMA2 .
  	
  
  	


  
  
  
  
  
  op _=:_ : RecordType RecordType -> Bool .
  eq { R1 } =: { R2 } = R1 =: R2 .

  op _=:_ : FieldSet FieldSet -> Bool .
  eq R1 =: R2 =
    
    
  	
  	(domainRestriction(R1,R2) == R2)  .
  
  
  
  	
    
  	
  	
  





  
  


  sort FocusType? .
  subsort QualifiedCid < FocusType? .
  var FC : FocusType? .

  
  
  
  
  
  
  
  

  
  op _;_|-_ : FocusType? Map{VarExpr,FmaType} PropSet -> FmaType? .

  eq [T-PROPSET-EMPTY] : FC ; TE |- noProp = { noField } .
  ceq [T-PROPSET-ATT] : FC ; TE |- (P = V), PS 
    
    = { (P :t type(FC,P)) R }
  if   
  	ALPHA := TE |- V
  /\
    typeName( (P :t (ALPHA[0 .. -1] { bag } uni)) ) : DataTypeName 
  /\
  	{ R } := FC ; TE |- PS .

  ceq [T-PROPSET-REF] : FC ; TE |- (P = ref(iOS)), PS 
    
    = { (P :t type(FC,P)) R }
  if
  
  
    lower(FC,P) <=N | iOS |
  /\
    (upper(FC,P) == -1) or-else ((upper(FC,P) =/= -1) and-then upper(FC,P) >=N | iOS |) 
  /\
    isUnique(FC,P) and-then not(hasDuplicates(iOS))
  /\
  	ref(C) := TE |- ref(iOS)  
  /\
    C <: typeName(FC,P)
  /\
  	{ R } := FC ; TE |- PS  .

  ceq [T-PROPSET-CMT] : FC ; TE |- (P = val(iObjS)), PS 
  
  
  
  
  
  
  
    
    = { (P :t type(FC,P)) R }
  if   
  
  
    lower(FC,P) <=N | iObjS |
  /\
    (upper(FC,P) == -1) or-else ((upper(FC,P) =/= -1) and-then upper(FC,P) >=N | iObjS |) 
  /\
    isUnique(FC,P) and-then not(hasDuplicates(iObjS))
  /\
   	C := TE |- val(iObjS) 
  /\
    C <: typeName(FC,P)
  
  /\
  	{ R } := FC ; TE |- PS .

  
endm

mod FMA-TYPE-INFERENCE-DSL is
  inc FMA-TYPE-INFERENCE-MODEL .
  
  var TAU : FmaType .
  var BT : BaseTypeName .
  var ALPHA : Scalar .
  var SIGMA : FieldSet .
  var V : ValueExpr .
  var O : Oid .
  vars FC C C1 C2 : QualifiedCid .
  var I I1 I2 : Int .
  var P : PropName .
  var PS : PropSet .
  var VAR : VarExpr .
  var E : Expr .
  var STMT STMT1 STMT2 : Stmt .
  
  var TE : Map{VarExpr,FmaType} . 
  var DT : DataTypeName .
  
  
  
  
  
  
  
  


  
  op _|-_ : Map{VarExpr,FmaType} Stmt -> FmaType? .
  
  
  
  

  
  ceq [T-CreateRoot] : TE |- create(C) = 
  	Unit 
  if  
  	default(C) : PropSet 
  /\
  	C <: r(getMetamodelName(C)) . 
  
  ceq [T-DeleteRoot] : (TE, (VAR |-> ref(C))) |- delete(VAR) =
    Unit 
  if C <: r(getMetamodelName(C)) . 
  
  ceq [T-FmaLet] : TE |- let VAR = E in STMT  =
    Unit 
  if 
  	ALPHA := TE |- E  
  /\ 
  	(TE, (VAR |-> ALPHA)) |- STMT = Unit .

  ceq [T-FmaLetCreate] : TE |- let VAR = create(C) in STMT =
    Unit
  if
  	TE |- create(C) = Unit 
  /\ 
  	(TE, (VAR |-> ref(C))) |- STMT = Unit .

  ceq [T-FmaSnapshot] : (TE, (VAR |-> ref(C))) |- snapshot VAR { STMT } =
    Unit 
  if C ; (TE, (VAR |-> ref(C))) |- STMT = Unit .
      
  eq [T-FmaUnit] : TE |- () = Unit .
  
  ceq [T-FmaSeq] : TE |- (STMT1 ; STMT2) = 
  	TAU 
  if TE |- STMT1 = Unit /\ TAU := TE |- STMT2 .  
  

  
  





  
  op _;_|-_ : FocusType? Map{VarExpr,FmaType} Stmt -> FmaType? .
  
  ceq [T-ActCreate] : FC ; TE |- create(P,C) =
    Unit 
  if   
  	default(C) : PropSet 
  /\
    
    
  	C <: typeName(FC,P) .  
  
  ceq [T-ActSet-Att] : FC ; TE |- set(P,E) =
    Unit
  if DT := TE |- E 
  /\ 
  DT <: typeName(FC,P)  .
  
  ceq [T-ActSet-Ref] : FC ; TE |- set(P,E) =
    Unit
  if ref(C) := TE |- E 
  /\ 
  C <: typeName(FC,P)  .

  ceq [T-ActSet-Cmt] : FC ; TE |- set(P,E) =
    Unit
  if C := TE |- E 
  /\ 
  C <: typeName(FC,P)  .

  ceq [T-ActAttUnset] : FC ; TE |- unset(P) = 
    Unit 
  if DT := typeName(FC,P) . 

  ceq [T-ActRefUnset] : FC ; TE, (VAR |-> ref(C)) |- unset(P,VAR) =
    Unit
  if ref(C) <: typeName(FC,P) . 

  ceq [T-ActCmtSet] : FC ; TE, (VAR |-> ref(C)) |- setCmt(P,VAR) =
    Unit 
  if C <: typeName(FC,P)  .

  ceq [T-ActCmtUnset] : FC ; TE, (VAR |-> ref(C)) |- unset(P,VAR) =
    Unit
  if C <: typeName(FC,P)  .
  
  ceq [T-ActActLet] : FC ; TE |- let VAR = E in STMT = 
    Unit 
  if 
  	 ALPHA := TE |- E 
  /\ 
  	FC ; TE, (VAR |-> ALPHA) |- STMT = Unit .

  ceq [T-ActLetCreate] : FC ; TE |- let VAR = create(P,C) in STMT =
    Unit
  if
  	FC ; TE |- create(P,C) = Unit 
  /\ 
  	FC ; (TE, (VAR |-> ref(C))) |- STMT = Unit . 
  
  ceq [T-ActSnapshot] : FC ; (TE, (VAR |-> ref(C))) |- snapshot VAR { STMT } =
    Unit 
  if C ; (TE, (VAR |-> ref(C))) |- STMT = Unit .
  
  eq [T-Unit] : FC ; TE |- (()) = Unit .
  
  ceq [T-ActSeq] : FC ; TE |- (STMT1 ; STMT2) = 
    TAU
  if FC ; TE |- STMT1 = Unit /\ TAU := FC ; TE |- STMT2 .  

  


endm



mod FMA-TYPE-CHECKER is
  inc FMA-TYPE-INFERENCE-DSL .
    
  vars TYPE TYPE2 : FmaType .
  var TYPE? : FmaType? .
  var TE : Map{VarExpr,FmaType} . 
  var E : Expr .
  var IOBJS : IObjectSet .
  var OBJ : Object .
  var PS : PropSet .
  vars FC C C1 C2 : QualifiedCid . 
  var STMT : Stmt . 
  
    
  sorts TError TJudgement TJudgement? . 
  subsorts TError TJudgement < TJudgement? .
  subsort TError < StmtError .






  
  
  op _|-_:_ : Map{VarExpr,FmaType} Expr FmaType -> TJudgement? .
  op isValueOf : Expr FmaType -> TJudgement .
  op error : String Map{VarExpr,FmaType} Expr FmaType -> TError .
  
  op getErrorMessage : TError -> String .
  eq getErrorMessage(error(M:String, TE, E, TYPE))  = M:String .
  
  
  
  eq [TC-ExprString] : TE |- val(S:String) : DSL#String = isValueOf(val(S:String), DSL#String) . 
  eq [TC-ExprInt] : TE |- val(I:Int) : DSL#Int = isValueOf(val(I:Int), DSL#Int) . 
  eq [TC-ExprInt] : TE |- val(B:Bool) : DSL#Bool = isValueOf(val(B:Bool), DSL#Bool) . 
  
  
  
  ceq [TC-ExprOidVal] : TE |- val(O:Oid) : ref(C) = isValueOf(val(O:Oid), ref(C)) 
  if
  	ref(C2) := TE |- val(O:Oid) 
  /\
    type(C2) <: type(C) . 
    
  ceq [TC-ExprOidValSubtypingError] : TE |- val(O:Oid) : ref(C) = error("TC-ExprOidValSubtypingError: reference is not typed properly", TE, val(O:Oid), ref(C)) 
  if
  	ref(C2) := TE |- val(O:Oid) 
  /\ 
    not(type(C2) <: type(C)) .
    
  
  ceq [TC-ExprRef] : TE |- ref(IS:IOidSet) : ref(C) = isValueOf(ref(IS:IOidSet), ref(C)) 
  if
  	ref(C2) := TE |- ref(IS:IOidSet) 
  /\ 
    type(C2) <: type(C) .  
    
  ceq [TC-ExprRefSubtypingError] : TE |- ref(IS:IOidSet) : ref(C) = error("TC-ExprRefSubtypingError: inferred type is not a subtype of the given type", TE,ref(IS:IOidSet), ref(C)) 
  if
  	ref(C2) := TE |- ref(IS:IOidSet) 
  /\ 
    not(type(C2) <: type(C)) .
    

  
  ceq [TC-ExprInferenceError] : TE |- E : TYPE = error("TC-ExprInferenceError: could not infer a valid type", TE, E, TYPE)	
  if TYPE? := TE |- E /\ isError(TYPE?) .

  
  
  ceq [TC-IObjectSet] : TE |- val(IOBJS) : C = isValueOf(val(IOBJS), C) 
  if 
  	C2 := TE |- val(IOBJS) 
  /\ 
    type(C2) <: type(C) .  
    
  ceq [TC-IObjectSetSubtypingError] : TE |- val(IOBJS) : C = error("TC-IObjectSetSubtypingError: inferred type is not a subtype of the given type", TE, val(IOBJS), C)
  if 
    C2 := TE |- val(IOBJS) 
  /\
    not(type(C2) <: type(C)) .
    
  ceq [TC-IObjectSetInferenceError] : TE |- val(IOBJS) : TYPE = error("TC-IObjectSetInferenceError: could not infer a valid type", TE, val(IOBJS), TYPE)	
  if TYPE? := TE |- val(IOBJS) /\ isError(TYPE?) .

  eq [TC-ExprError] : TE |- E : TYPE = error("TC-ExprError", TE, E, TYPE) [owise] . 
  
  
  
  
  
  op _;_|-_:_ : FocusType? Map{VarExpr,FmaType} PropSet FmaType -> TJudgement? .
  op isValueOf : PropSet FmaType -> TJudgement .
  op error : String Map{VarExpr,FmaType} PropSet FmaType -> TError .
  eq getErrorMessage(error(M:String, TE, PS, TYPE))  = M:String .
   
  ceq [TC-Record] : FC ; TE |- PS : TYPE = isValueOf(PS, TYPE) 
  if TYPE2 := FC ; TE |- PS /\ TYPE2 <: TYPE . 
  ceq [TC-RecordSubsumptionError] :  FC ; TE |- PS : TYPE = error("TC-RecordSubsumptionError: inferred type is not a subtype of the given type", TE, PS, TYPE)	
  if TYPE2 := FC ; TE |- PS /\ not(TYPE2 <: TYPE) .
  ceq [TC-RecordInferenceError] :  FC ; TE |- PS : TYPE = error("TC-RecordInferenceError: could not infer a valid type", TE, PS, TYPE)	
  if TYPE? := FC ; TE |- PS /\ isError(TYPE?) .

  
  
  op _|-_:_ : Map{VarExpr,FmaType} Object FmaType -> TJudgement? .
  op isValueOf : Object QualifiedCid -> TJudgement .
  op error : String Map{VarExpr,FmaType} Object FmaType -> TError . 
  eq getErrorMessage(error(M:String, TE, OBJ, TYPE))  = M:String .
  
  ceq [TC-Object] : TE |- OBJ : C = isValueOf(OBJ, C) 
  if 
    C2 := TE |- OBJ 
  /\
    type(C2) <: type(C) .  
    
  ceq [TC-ObjectSubtypingError] : TE |- OBJ : C = error("TC-ObjectSubtypingError: inferred type is not a subtype of the given type", TE, OBJ, C) 
  if 
    C2 := TE |- OBJ 
  /\
    not(type(C2) <: type(C)) .
    
  ceq [TC-ObjectInferenceError] : TE |- OBJ : C = error("TC-ObjectInferenceError: could not infer a valid type", TE, OBJ, C)	
  if TYPE? := TE |- OBJ /\ isError(TYPE?) .

  
  
  op _|-_:_ : Map{VarExpr,FmaType} Stmt FmaType -> TJudgement? .
  op isValueOf : Stmt UnitType -> TJudgement .
  op error : String Map{VarExpr,FmaType} Stmt FmaType -> TError . 
  eq getErrorMessage(error(M:String, TE, STMT, TYPE))  = M:String .
  ceq [TC-FmSTMT] : TE |- STMT : Unit = isValueOf(STMT, Unit) 
  if TE |- STMT = Unit . 
  ceq [TC-FmSTMTInferenceError] : TE |- STMT : TYPE = error("TC-FmSTMTInferenceError: could not infer a valid type", TE, STMT, TYPE)	
  if TYPE? := TE |- STMT /\ isError(TYPE?) .

  
  
  op _;_|-_:_ : FocusType? Map{VarExpr,FmaType} Stmt FmaType -> TJudgement? .
  op isValueOf : Stmt UnitType -> TJudgement .
  op error : String FocusType? Map{VarExpr,FmaType} Stmt FmaType -> TError .
  eq getErrorMessage(error(M:String, FC, TE, STMT, TYPE))  = M:String .
   
  ceq [TC-Stmt] : FC ; TE |- STMT : Unit = isValueOf(STMT, Unit) 
  if FC ; TE |- STMT = Unit . 
  ceq [TC-StmtInferenceError] : FC ; TE |- STMT : TYPE = error("TC-StmtInferenceError: could not infer a valid type", FC, TE, STMT, TYPE)	
  if TYPE? := FC ; TE |- STMT /\ isError(TYPE?) .
  

  
  op isError : FmaType? -> Bool .
  eq isError(TYPE:FmaType) = false .
  eq isError(TYPE?) = true [owise] .
  
  
  
  
 
  
endm
